/**
 * This Jenkinsfile builds Theia Next across the major OS platforms
 */
import groovy.json.JsonSlurper

distFolder = "applications/electron/dist"

pipeline {
    agent none
    options {
        timeout(time: 5, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    environment {
        BLUEPRINT_JENKINS_CI = 'true'
    }
    stages {
        stage('Build') {
            parallel {
                stage('Test Linux Next Theia') {
                    agent {
                        kubernetes {
                            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: theia-dev
    image: eclipsetheia/theia-blueprint
    command:
    - cat
    tty: true
    resources:
      limits:
        memory: "8Gi"
        cpu: "2"
      requests:
        memory: "8Gi"
        cpu: "2"
    volumeMounts:
    - name: global-cache
      mountPath: /.cache
    - name: global-yarn
      mountPath: /.yarn      
    - name: global-npm
      mountPath: /.npm      
    - name: electron-cache
      mountPath: /.electron-gyp
  volumes:
  - name: global-cache
    emptyDir: {}
  - name: global-yarn
    emptyDir: {}
  - name: global-npm
    emptyDir: {}
  - name: electron-cache
    emptyDir: {}
"""
                        }
                    }
                    steps {
                        container('theia-dev') {
                            script {
                                buildNext()
                            }
                        }
                    }
                    post {
                        failure {
                            error("Linux installer creation failed, aborting...")
                        }
                    }
                }
                // stage('Create Mac Installer') {
                //     agent {
                //         label 'macos'
                //     }
                //     steps {
                //         script {
                //             buildNext()
                //         }
                //     }
                //     post {
                //         failure {
                //             error("Mac installer creation failed, aborting...")
                //         }
                //     }
                // }
                // stage('Create Windows Installer') {
                //     agent {
                //         label 'windows'
                //     }
                //     steps {
                //         script {
                //             buildNext()
                //         }
                //     }
                //     post {
                //         failure {
                //             error("Windows installer creation failed, aborting...")
                //         }
                //     }
                // }
            }
        }
    }
}

def buildNext() {
    int MAX_RETRY = 3

    checkout scm
    sh "printenv && yarn cache dir"
    sh "yarn cache clean"
    try {
        sh(script: 'yarn --frozen-lockfile --force')
    } catch(error) {
        retry(MAX_RETRY) {
            echo "yarn failed - Retrying"
            sh(script: 'yarn --frozen-lockfile --force')        
        }
    }

    echo "Updating versions to next"
    sh "yarn update:next"
        try {
        sh(script: 'yarn --force')
    } catch(error) {
        retry(MAX_RETRY) {
            echo "yarn failed - Retrying"
            sh(script: 'yarn --force')        
        }
    }

    sh "rm -rf ./${distFolder}"
    sshagent(['projects-storage.eclipse.org-bot-ssh']) {
        sh "yarn electron package:preview"
        sh "yarn electron test"
    }
}
